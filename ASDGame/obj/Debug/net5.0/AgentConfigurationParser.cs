//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\arnold\source\repos\Test\Test\Agent\Antlr\Grammar\AgentConfiguration.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Agent.Antlr.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class AgentConfigurationParser : Parser {
	public const int
		WS=1, DOUBLE_QUOTE=2, EQUALSIGN=3, FINDS=4, NEARBY=5, WHEN=6, OTHERWISE=7, 
		THEN=8, GREATER_THAN=9, LESS_THAN=10, EQUALS=11, CONTAINS=12, DOES_NOT_CONTAIN=13, 
		PLAYER=14, NPC=15, INVENTORY=16, OPPONENT=17, POTION=18, ITEM=19, WEAPON=20, 
		CURRENT=21, STRENGTH=22, HEALTH=23, POWER=24, STAMINA=25, GENERAL=26, 
		COMBAT=27, EXPLORE=28, INT=29, STRING=30;
	public const int
		RULE_configuration = 0, RULE_rule = 1, RULE_settingBlock = 2, RULE_actionBlock = 3, 
		RULE_condition = 4, RULE_whenClause = 5, RULE_otherwiseClause = 6, RULE_comparison = 7, 
		RULE_setting = 8, RULE_action = 9, RULE_actionSubject = 10, RULE_string = 11, 
		RULE_comparable = 12, RULE_itemStat = 13, RULE_subjectStat = 14, RULE_subject = 15, 
		RULE_item = 16, RULE_stat = 17;
	public static readonly string[] ruleNames = {
		"configuration", "rule", "settingBlock", "actionBlock", "condition", "whenClause", 
		"otherwiseClause", "comparison", "setting", "action", "actionSubject", 
		"string", "comparable", "itemStat", "subjectStat", "subject", "item", 
		"stat"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'\"'", "'='", "'finds'", "'nearby'", "'when'", "'otherwise'", 
		"'then'", "'greater than'", "'less than'", "'equals'", "'contains'", "'does not contain'", 
		"'player'", "'npc'", "'inventory'", "'opponent'", "'potion'", "'item'", 
		"'weapon'", "'current'", "'strength'", "'health'", "'power'", "'stamina'", 
		"'general'", "'combat'", "'explore'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "DOUBLE_QUOTE", "EQUALSIGN", "FINDS", "NEARBY", "WHEN", "OTHERWISE", 
		"THEN", "GREATER_THAN", "LESS_THAN", "EQUALS", "CONTAINS", "DOES_NOT_CONTAIN", 
		"PLAYER", "NPC", "INVENTORY", "OPPONENT", "POTION", "ITEM", "WEAPON", 
		"CURRENT", "STRENGTH", "HEALTH", "POWER", "STAMINA", "GENERAL", "COMBAT", 
		"EXPLORE", "INT", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AgentConfiguration.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public AgentConfigurationParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ConfigurationContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(AgentConfigurationParser.Eof, 0); }
		public RuleContext[] rule() {
			return GetRuleContexts<RuleContext>();
		}
		public RuleContext rule(int i) {
			return GetRuleContext<RuleContext>(i);
		}
		public SettingBlockContext[] settingBlock() {
			return GetRuleContexts<SettingBlockContext>();
		}
		public SettingBlockContext settingBlock(int i) {
			return GetRuleContext<SettingBlockContext>(i);
		}
		public ConfigurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configuration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterConfiguration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitConfiguration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfiguration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigurationContext configuration() {
		ConfigurationContext _localctx = new ConfigurationContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_configuration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 36; rule();
					}
					} 
				}
				State = 41;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			}
			State = 45;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMBAT || _la==EXPLORE) {
				{
				{
				State = 42; settingBlock();
				}
				}
				State = 47;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 48; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleContext : ParserRuleContext {
		public ITerminalNode EQUALSIGN() { return GetToken(AgentConfigurationParser.EQUALSIGN, 0); }
		public ITerminalNode[] STRING() { return GetTokens(AgentConfigurationParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(AgentConfigurationParser.STRING, i);
		}
		public SettingContext setting() {
			return GetRuleContext<SettingContext>(0);
		}
		public RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuleContext rule() {
		RuleContext _localctx = new RuleContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case COMBAT:
			case EXPLORE:
				{
				State = 50; setting();
				}
				break;
			case STRING:
				{
				State = 51; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 54; Match(EQUALSIGN);
			State = 55; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SettingBlockContext : ParserRuleContext {
		public SettingContext setting() {
			return GetRuleContext<SettingContext>(0);
		}
		public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public ActionBlockContext[] actionBlock() {
			return GetRuleContexts<ActionBlockContext>();
		}
		public ActionBlockContext actionBlock(int i) {
			return GetRuleContext<ActionBlockContext>(i);
		}
		public SettingBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_settingBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterSettingBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitSettingBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSettingBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SettingBlockContext settingBlock() {
		SettingBlockContext _localctx = new SettingBlockContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_settingBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; setting();
			State = 60;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				State = 60;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case WHEN:
					{
					State = 58; condition();
					}
					break;
				case STRING:
					{
					State = 59; actionBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 62;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==WHEN || _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionBlockContext : ParserRuleContext {
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public ActionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterActionBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitActionBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionBlockContext actionBlock() {
		ActionBlockContext _localctx = new ActionBlockContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_actionBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 64; action();
			State = 66;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 65; condition();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 68;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public WhenClauseContext whenClause() {
			return GetRuleContext<WhenClauseContext>(0);
		}
		public OtherwiseClauseContext otherwiseClause() {
			return GetRuleContext<OtherwiseClauseContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_condition);
		try {
			State = 74;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70; whenClause();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71; whenClause();
				State = 72; otherwiseClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenClauseContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(AgentConfigurationParser.WHEN, 0); }
		public ComparableContext[] comparable() {
			return GetRuleContexts<ComparableContext>();
		}
		public ComparableContext comparable(int i) {
			return GetRuleContext<ComparableContext>(i);
		}
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(AgentConfigurationParser.THEN, 0); }
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public ActionSubjectContext actionSubject() {
			return GetRuleContext<ActionSubjectContext>(0);
		}
		public WhenClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterWhenClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitWhenClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenClauseContext whenClause() {
		WhenClauseContext _localctx = new WhenClauseContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_whenClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(WHEN);
			State = 77; comparable();
			State = 78; comparison();
			State = 79; comparable();
			State = 80; Match(THEN);
			State = 83;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				State = 81; action();
				}
				break;

			case 2:
				{
				State = 82; actionSubject();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherwiseClauseContext : ParserRuleContext {
		public ITerminalNode OTHERWISE() { return GetToken(AgentConfigurationParser.OTHERWISE, 0); }
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public ActionSubjectContext actionSubject() {
			return GetRuleContext<ActionSubjectContext>(0);
		}
		public OtherwiseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherwiseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterOtherwiseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitOtherwiseClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOtherwiseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OtherwiseClauseContext otherwiseClause() {
		OtherwiseClauseContext _localctx = new OtherwiseClauseContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_otherwiseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(OTHERWISE);
			State = 88;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				{
				State = 86; action();
				}
				break;

			case 2:
				{
				State = 87; actionSubject();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public ITerminalNode GREATER_THAN() { return GetToken(AgentConfigurationParser.GREATER_THAN, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(AgentConfigurationParser.LESS_THAN, 0); }
		public ITerminalNode EQUALS() { return GetToken(AgentConfigurationParser.EQUALS, 0); }
		public ITerminalNode CONTAINS() { return GetToken(AgentConfigurationParser.CONTAINS, 0); }
		public ITerminalNode DOES_NOT_CONTAIN() { return GetToken(AgentConfigurationParser.DOES_NOT_CONTAIN, 0); }
		public ITerminalNode NEARBY() { return GetToken(AgentConfigurationParser.NEARBY, 0); }
		public ITerminalNode FINDS() { return GetToken(AgentConfigurationParser.FINDS, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FINDS) | (1L << NEARBY) | (1L << GREATER_THAN) | (1L << LESS_THAN) | (1L << EQUALS) | (1L << CONTAINS) | (1L << DOES_NOT_CONTAIN))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SettingContext : ParserRuleContext {
		public ITerminalNode COMBAT() { return GetToken(AgentConfigurationParser.COMBAT, 0); }
		public ITerminalNode EXPLORE() { return GetToken(AgentConfigurationParser.EXPLORE, 0); }
		public SettingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setting; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterSetting(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitSetting(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetting(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SettingContext setting() {
		SettingContext _localctx = new SettingContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_setting);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			_la = _input.La(1);
			if ( !(_la==COMBAT || _la==EXPLORE) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(AgentConfigurationParser.STRING, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionSubjectContext : ParserRuleContext {
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public SubjectContext subject() {
			return GetRuleContext<SubjectContext>(0);
		}
		public ItemContext item() {
			return GetRuleContext<ItemContext>(0);
		}
		public ActionSubjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actionSubject; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterActionSubject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitActionSubject(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActionSubject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionSubjectContext actionSubject() {
		ActionSubjectContext _localctx = new ActionSubjectContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_actionSubject);
		try {
			State = 102;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96; action();
				State = 97; subject();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99; action();
				State = 100; item();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode[] DOUBLE_QUOTE() { return GetTokens(AgentConfigurationParser.DOUBLE_QUOTE); }
		public ITerminalNode DOUBLE_QUOTE(int i) {
			return GetToken(AgentConfigurationParser.DOUBLE_QUOTE, i);
		}
		public ITerminalNode[] STRING() { return GetTokens(AgentConfigurationParser.STRING); }
		public ITerminalNode STRING(int i) {
			return GetToken(AgentConfigurationParser.STRING, i);
		}
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(DOUBLE_QUOTE);
			State = 106;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 105; Match(STRING);
				}
				}
				State = 108;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==STRING );
			State = 110; Match(DOUBLE_QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparableContext : ParserRuleContext {
		public ItemContext item() {
			return GetRuleContext<ItemContext>(0);
		}
		public ItemStatContext itemStat() {
			return GetRuleContext<ItemStatContext>(0);
		}
		public SubjectContext subject() {
			return GetRuleContext<SubjectContext>(0);
		}
		public SubjectStatContext subjectStat() {
			return GetRuleContext<SubjectStatContext>(0);
		}
		public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public ITerminalNode INT() { return GetToken(AgentConfigurationParser.INT, 0); }
		public ComparableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterComparable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitComparable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparableContext comparable() {
		ComparableContext _localctx = new ComparableContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_comparable);
		try {
			State = 118;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112; item();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 113; itemStat();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 114; subject();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 115; subjectStat();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 116; stat();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 117; Match(INT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemStatContext : ParserRuleContext {
		public ItemContext item() {
			return GetRuleContext<ItemContext>(0);
		}
		public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public ItemStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_itemStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterItemStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitItemStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItemStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemStatContext itemStat() {
		ItemStatContext _localctx = new ItemStatContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_itemStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; item();
			State = 121; stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubjectStatContext : ParserRuleContext {
		public SubjectContext subject() {
			return GetRuleContext<SubjectContext>(0);
		}
		public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public SubjectStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subjectStat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterSubjectStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitSubjectStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubjectStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubjectStatContext subjectStat() {
		SubjectStatContext _localctx = new SubjectStatContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_subjectStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; subject();
			State = 124; stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubjectContext : ParserRuleContext {
		public SubjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subject; } }
	 
		public SubjectContext() { }
		public virtual void CopyFrom(SubjectContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NpcContext : SubjectContext {
		public ITerminalNode NPC() { return GetToken(AgentConfigurationParser.NPC, 0); }
		public NpcContext(SubjectContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterNpc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitNpc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNpc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurrentContext : SubjectContext {
		public ITerminalNode CURRENT() { return GetToken(AgentConfigurationParser.CURRENT, 0); }
		public CurrentContext(SubjectContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterCurrent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitCurrent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpponentContext : SubjectContext {
		public ITerminalNode OPPONENT() { return GetToken(AgentConfigurationParser.OPPONENT, 0); }
		public OpponentContext(SubjectContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterOpponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitOpponent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TileContext : SubjectContext {
		public ITerminalNode STRING() { return GetToken(AgentConfigurationParser.STRING, 0); }
		public TileContext(SubjectContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterTile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitTile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InventoryContext : SubjectContext {
		public ITerminalNode INVENTORY() { return GetToken(AgentConfigurationParser.INVENTORY, 0); }
		public InventoryContext(SubjectContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterInventory(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitInventory(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInventory(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlayerContext : SubjectContext {
		public ITerminalNode PLAYER() { return GetToken(AgentConfigurationParser.PLAYER, 0); }
		public PlayerContext(SubjectContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterPlayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitPlayer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlayer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubjectContext subject() {
		SubjectContext _localctx = new SubjectContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_subject);
		try {
			State = 132;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case PLAYER:
				_localctx = new PlayerContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 126; Match(PLAYER);
				}
				break;
			case NPC:
				_localctx = new NpcContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 127; Match(NPC);
				}
				break;
			case OPPONENT:
				_localctx = new OpponentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 128; Match(OPPONENT);
				}
				break;
			case INVENTORY:
				_localctx = new InventoryContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 129; Match(INVENTORY);
				}
				break;
			case CURRENT:
				_localctx = new CurrentContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 130; Match(CURRENT);
				}
				break;
			case STRING:
				_localctx = new TileContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 131; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemContext : ParserRuleContext {
		public ITerminalNode ITEM() { return GetToken(AgentConfigurationParser.ITEM, 0); }
		public ITerminalNode POTION() { return GetToken(AgentConfigurationParser.POTION, 0); }
		public ITerminalNode WEAPON() { return GetToken(AgentConfigurationParser.WEAPON, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_item; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitItem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemContext item() {
		ItemContext _localctx = new ItemContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_item);
		try {
			State = 138;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ITEM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 134; Match(ITEM);
				}
				break;
			case POTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 135; Match(POTION);
				}
				break;
			case WEAPON:
				EnterOuterAlt(_localctx, 3);
				{
				State = 136; Match(WEAPON);
				}
				break;
			case DOUBLE_QUOTE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 137; @string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public ITerminalNode STRENGTH() { return GetToken(AgentConfigurationParser.STRENGTH, 0); }
		public ITerminalNode POWER() { return GetToken(AgentConfigurationParser.POWER, 0); }
		public ITerminalNode HEALTH() { return GetToken(AgentConfigurationParser.HEALTH, 0); }
		public ITerminalNode STAMINA() { return GetToken(AgentConfigurationParser.STAMINA, 0); }
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAgentConfigurationListener typedListener = listener as IAgentConfigurationListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IAgentConfigurationVisitor<TResult> typedVisitor = visitor as IAgentConfigurationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_stat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRENGTH) | (1L << HEALTH) | (1L << POWER) | (1L << STAMINA))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3 \x91\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x3\x2\a\x2(\n\x2\f\x2\xE\x2"+
		"+\v\x2\x3\x2\a\x2.\n\x2\f\x2\xE\x2\x31\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x5"+
		"\x3\x37\n\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x6\x4?\n\x4\r\x4\xE\x4"+
		"@\x3\x5\x3\x5\x6\x5\x45\n\x5\r\x5\xE\x5\x46\x3\x6\x3\x6\x3\x6\x3\x6\x5"+
		"\x6M\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\aV\n\a\x3\b\x3\b\x3\b"+
		"\x5\b[\n\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f"+
		"\x5\fi\n\f\x3\r\x3\r\x6\rm\n\r\r\r\xE\rn\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x5\xEy\n\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x87\n\x11\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x5\x12\x8D\n\x12\x3\x13\x3\x13\x3\x13\x2\x2\x2\x14\x2\x2"+
		"\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2\x2\x5\x4\x2\x6\a\v\xF\x3\x2\x1D\x1E\x3"+
		"\x2\x18\x1B\x96\x2)\x3\x2\x2\x2\x4\x36\x3\x2\x2\x2\x6;\x3\x2\x2\x2\b\x42"+
		"\x3\x2\x2\x2\nL\x3\x2\x2\x2\fN\x3\x2\x2\x2\xEW\x3\x2\x2\x2\x10\\\x3\x2"+
		"\x2\x2\x12^\x3\x2\x2\x2\x14`\x3\x2\x2\x2\x16h\x3\x2\x2\x2\x18j\x3\x2\x2"+
		"\x2\x1Ax\x3\x2\x2\x2\x1Cz\x3\x2\x2\x2\x1E}\x3\x2\x2\x2 \x86\x3\x2\x2\x2"+
		"\"\x8C\x3\x2\x2\x2$\x8E\x3\x2\x2\x2&(\x5\x4\x3\x2\'&\x3\x2\x2\x2(+\x3"+
		"\x2\x2\x2)\'\x3\x2\x2\x2)*\x3\x2\x2\x2*/\x3\x2\x2\x2+)\x3\x2\x2\x2,.\x5"+
		"\x6\x4\x2-,\x3\x2\x2\x2.\x31\x3\x2\x2\x2/-\x3\x2\x2\x2/\x30\x3\x2\x2\x2"+
		"\x30\x32\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x32\x33\a\x2\x2\x3\x33\x3\x3\x2"+
		"\x2\x2\x34\x37\x5\x12\n\x2\x35\x37\a \x2\x2\x36\x34\x3\x2\x2\x2\x36\x35"+
		"\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38\x39\a\x5\x2\x2\x39:\a \x2\x2:\x5"+
		"\x3\x2\x2\x2;>\x5\x12\n\x2<?\x5\n\x6\x2=?\x5\b\x5\x2><\x3\x2\x2\x2>=\x3"+
		"\x2\x2\x2?@\x3\x2\x2\x2@>\x3\x2\x2\x2@\x41\x3\x2\x2\x2\x41\a\x3\x2\x2"+
		"\x2\x42\x44\x5\x14\v\x2\x43\x45\x5\n\x6\x2\x44\x43\x3\x2\x2\x2\x45\x46"+
		"\x3\x2\x2\x2\x46\x44\x3\x2\x2\x2\x46G\x3\x2\x2\x2G\t\x3\x2\x2\x2HM\x5"+
		"\f\a\x2IJ\x5\f\a\x2JK\x5\xE\b\x2KM\x3\x2\x2\x2LH\x3\x2\x2\x2LI\x3\x2\x2"+
		"\x2M\v\x3\x2\x2\x2NO\a\b\x2\x2OP\x5\x1A\xE\x2PQ\x5\x10\t\x2QR\x5\x1A\xE"+
		"\x2RU\a\n\x2\x2SV\x5\x14\v\x2TV\x5\x16\f\x2US\x3\x2\x2\x2UT\x3\x2\x2\x2"+
		"V\r\x3\x2\x2\x2WZ\a\t\x2\x2X[\x5\x14\v\x2Y[\x5\x16\f\x2ZX\x3\x2\x2\x2"+
		"ZY\x3\x2\x2\x2[\xF\x3\x2\x2\x2\\]\t\x2\x2\x2]\x11\x3\x2\x2\x2^_\t\x3\x2"+
		"\x2_\x13\x3\x2\x2\x2`\x61\a \x2\x2\x61\x15\x3\x2\x2\x2\x62\x63\x5\x14"+
		"\v\x2\x63\x64\x5 \x11\x2\x64i\x3\x2\x2\x2\x65\x66\x5\x14\v\x2\x66g\x5"+
		"\"\x12\x2gi\x3\x2\x2\x2h\x62\x3\x2\x2\x2h\x65\x3\x2\x2\x2i\x17\x3\x2\x2"+
		"\x2jl\a\x4\x2\x2km\a \x2\x2lk\x3\x2\x2\x2mn\x3\x2\x2\x2nl\x3\x2\x2\x2"+
		"no\x3\x2\x2\x2op\x3\x2\x2\x2pq\a\x4\x2\x2q\x19\x3\x2\x2\x2ry\x5\"\x12"+
		"\x2sy\x5\x1C\xF\x2ty\x5 \x11\x2uy\x5\x1E\x10\x2vy\x5$\x13\x2wy\a\x1F\x2"+
		"\x2xr\x3\x2\x2\x2xs\x3\x2\x2\x2xt\x3\x2\x2\x2xu\x3\x2\x2\x2xv\x3\x2\x2"+
		"\x2xw\x3\x2\x2\x2y\x1B\x3\x2\x2\x2z{\x5\"\x12\x2{|\x5$\x13\x2|\x1D\x3"+
		"\x2\x2\x2}~\x5 \x11\x2~\x7F\x5$\x13\x2\x7F\x1F\x3\x2\x2\x2\x80\x87\a\x10"+
		"\x2\x2\x81\x87\a\x11\x2\x2\x82\x87\a\x13\x2\x2\x83\x87\a\x12\x2\x2\x84"+
		"\x87\a\x17\x2\x2\x85\x87\a \x2\x2\x86\x80\x3\x2\x2\x2\x86\x81\x3\x2\x2"+
		"\x2\x86\x82\x3\x2\x2\x2\x86\x83\x3\x2\x2\x2\x86\x84\x3\x2\x2\x2\x86\x85"+
		"\x3\x2\x2\x2\x87!\x3\x2\x2\x2\x88\x8D\a\x15\x2\x2\x89\x8D\a\x14\x2\x2"+
		"\x8A\x8D\a\x16\x2\x2\x8B\x8D\x5\x18\r\x2\x8C\x88\x3\x2\x2\x2\x8C\x89\x3"+
		"\x2\x2\x2\x8C\x8A\x3\x2\x2\x2\x8C\x8B\x3\x2\x2\x2\x8D#\x3\x2\x2\x2\x8E"+
		"\x8F\t\x4\x2\x2\x8F%\x3\x2\x2\x2\x10)/\x36>@\x46LUZhnx\x86\x8C";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Agent.Antlr.Grammar
